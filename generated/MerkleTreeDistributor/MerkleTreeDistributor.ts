// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get windowIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get accountIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get rewardToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class CreatedWindow extends ethereum.Event {
  get params(): CreatedWindow__Params {
    return new CreatedWindow__Params(this);
  }
}

export class CreatedWindow__Params {
  _event: CreatedWindow;

  constructor(event: CreatedWindow) {
    this._event = event;
  }

  get windowIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rewardsDeposited(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewardToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class DeleteWindow extends ethereum.Event {
  get params(): DeleteWindow__Params {
    return new DeleteWindow__Params(this);
  }
}

export class DeleteWindow__Params {
  _event: DeleteWindow;

  constructor(event: DeleteWindow) {
    this._event = event;
  }

  get windowIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LockSet extends ethereum.Event {
  get params(): LockSet__Params {
    return new LockSet__Params(this);
  }
}

export class LockSet__Params {
  _event: LockSet;

  constructor(event: LockSet) {
    this._event = event;
  }

  get lockBlock(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WithdrawRewards extends ethereum.Event {
  get params(): WithdrawRewards__Params {
    return new WithdrawRewards__Params(this);
  }
}

export class WithdrawRewards__Params {
  _event: WithdrawRewards;

  constructor(event: WithdrawRewards) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get currency(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MerkleTreeDistributor__merkleWindowsResult {
  value0: Bytes;
  value1: Address;
  value2: string;

  constructor(value0: Bytes, value1: Address, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }
}

export class MerkleTreeDistributor__verifyClaimInput_claimStruct extends ethereum.Tuple {
  get windowIndex(): BigInt {
    return this[0].toBigInt();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get accountIndex(): BigInt {
    return this[2].toBigInt();
  }

  get account(): Address {
    return this[3].toAddress();
  }

  get merkleProof(): Array<Bytes> {
    return this[4].toBytesArray();
  }
}

export class MerkleTreeDistributor extends ethereum.SmartContract {
  static bind(address: Address): MerkleTreeDistributor {
    return new MerkleTreeDistributor("MerkleTreeDistributor", address);
  }

  isClaimed(windowIndex: BigInt, accountIndex: BigInt): boolean {
    let result = super.call("isClaimed", "isClaimed(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(windowIndex),
      ethereum.Value.fromUnsignedBigInt(accountIndex)
    ]);

    return result[0].toBoolean();
  }

  try_isClaimed(
    windowIndex: BigInt,
    accountIndex: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isClaimed",
      "isClaimed(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(windowIndex),
        ethereum.Value.fromUnsignedBigInt(accountIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockBlock(): BigInt {
    let result = super.call("lockBlock", "lockBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lockBlock", "lockBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  merkleWindows(param0: BigInt): MerkleTreeDistributor__merkleWindowsResult {
    let result = super.call(
      "merkleWindows",
      "merkleWindows(uint256):(bytes32,address,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MerkleTreeDistributor__merkleWindowsResult(
      result[0].toBytes(),
      result[1].toAddress(),
      result[2].toString()
    );
  }

  try_merkleWindows(
    param0: BigInt
  ): ethereum.CallResult<MerkleTreeDistributor__merkleWindowsResult> {
    let result = super.tryCall(
      "merkleWindows",
      "merkleWindows(uint256):(bytes32,address,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MerkleTreeDistributor__merkleWindowsResult(
        value[0].toBytes(),
        value[1].toAddress(),
        value[2].toString()
      )
    );
  }

  nextCreatedIndex(): BigInt {
    let result = super.call(
      "nextCreatedIndex",
      "nextCreatedIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextCreatedIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextCreatedIndex",
      "nextCreatedIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verifyClaim(
    _claim: MerkleTreeDistributor__verifyClaimInput_claimStruct
  ): boolean {
    let result = super.call(
      "verifyClaim",
      "verifyClaim((uint256,uint256,uint256,address,bytes32[])):(bool)",
      [ethereum.Value.fromTuple(_claim)]
    );

    return result[0].toBoolean();
  }

  try_verifyClaim(
    _claim: MerkleTreeDistributor__verifyClaimInput_claimStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyClaim",
      "verifyClaim((uint256,uint256,uint256,address,bytes32[])):(bool)",
      [ethereum.Value.fromTuple(_claim)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _claim(): ClaimCall_claimStruct {
    return this._call.inputValues[0].value.toTuple() as ClaimCall_claimStruct;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall_claimStruct extends ethereum.Tuple {
  get windowIndex(): BigInt {
    return this[0].toBigInt();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get accountIndex(): BigInt {
    return this[2].toBigInt();
  }

  get account(): Address {
    return this[3].toAddress();
  }

  get merkleProof(): Array<Bytes> {
    return this[4].toBytesArray();
  }
}

export class ClaimMultiCall extends ethereum.Call {
  get inputs(): ClaimMultiCall__Inputs {
    return new ClaimMultiCall__Inputs(this);
  }

  get outputs(): ClaimMultiCall__Outputs {
    return new ClaimMultiCall__Outputs(this);
  }
}

export class ClaimMultiCall__Inputs {
  _call: ClaimMultiCall;

  constructor(call: ClaimMultiCall) {
    this._call = call;
  }

  get claims(): Array<ClaimMultiCallClaimsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      ClaimMultiCallClaimsStruct
    >();
  }
}

export class ClaimMultiCall__Outputs {
  _call: ClaimMultiCall;

  constructor(call: ClaimMultiCall) {
    this._call = call;
  }
}

export class ClaimMultiCallClaimsStruct extends ethereum.Tuple {
  get windowIndex(): BigInt {
    return this[0].toBigInt();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get accountIndex(): BigInt {
    return this[2].toBigInt();
  }

  get account(): Address {
    return this[3].toAddress();
  }

  get merkleProof(): Array<Bytes> {
    return this[4].toBytesArray();
  }
}

export class DeleteWindowCall extends ethereum.Call {
  get inputs(): DeleteWindowCall__Inputs {
    return new DeleteWindowCall__Inputs(this);
  }

  get outputs(): DeleteWindowCall__Outputs {
    return new DeleteWindowCall__Outputs(this);
  }
}

export class DeleteWindowCall__Inputs {
  _call: DeleteWindowCall;

  constructor(call: DeleteWindowCall) {
    this._call = call;
  }

  get windowIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeleteWindowCall__Outputs {
  _call: DeleteWindowCall;

  constructor(call: DeleteWindowCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetLockCall extends ethereum.Call {
  get inputs(): SetLockCall__Inputs {
    return new SetLockCall__Inputs(this);
  }

  get outputs(): SetLockCall__Outputs {
    return new SetLockCall__Outputs(this);
  }
}

export class SetLockCall__Inputs {
  _call: SetLockCall;

  constructor(call: SetLockCall) {
    this._call = call;
  }

  get _lock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLockCall__Outputs {
  _call: SetLockCall;

  constructor(call: SetLockCall) {
    this._call = call;
  }
}

export class SetWindowCall extends ethereum.Call {
  get inputs(): SetWindowCall__Inputs {
    return new SetWindowCall__Inputs(this);
  }

  get outputs(): SetWindowCall__Outputs {
    return new SetWindowCall__Outputs(this);
  }
}

export class SetWindowCall__Inputs {
  _call: SetWindowCall;

  constructor(call: SetWindowCall) {
    this._call = call;
  }

  get rewardsToDeposit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get merkleRoot(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get ipfsHash(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class SetWindowCall__Outputs {
  _call: SetWindowCall;

  constructor(call: SetWindowCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawRewardsCall extends ethereum.Call {
  get inputs(): WithdrawRewardsCall__Inputs {
    return new WithdrawRewardsCall__Inputs(this);
  }

  get outputs(): WithdrawRewardsCall__Outputs {
    return new WithdrawRewardsCall__Outputs(this);
  }
}

export class WithdrawRewardsCall__Inputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }

  get rewardCurrency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawRewardsCall__Outputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }
}
