// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClearDelegate extends ethereum.Event {
  get params(): ClearDelegate__Params {
    return new ClearDelegate__Params(this);
  }
}

export class ClearDelegate__Params {
  _event: ClearDelegate;

  constructor(event: ClearDelegate) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipChange extends ethereum.Event {
  get params(): OwnershipChange__Params {
    return new OwnershipChange__Params(this);
  }
}

export class OwnershipChange__Params {
  _event: OwnershipChange;

  constructor(event: OwnershipChange) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetDelegate extends ethereum.Event {
  get params(): SetDelegate__Params {
    return new SetDelegate__Params(this);
  }
}

export class SetDelegate__Params {
  _event: SetDelegate;

  constructor(event: SetDelegate) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DoughStakingDelegateRegistry extends ethereum.SmartContract {
  static bind(address: Address): DoughStakingDelegateRegistry {
    return new DoughStakingDelegateRegistry(
      "DoughStakingDelegateRegistry",
      address
    );
  }

  delegation(param0: Address): Address {
    let result = super.call("delegation", "delegation(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_delegation(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("delegation", "delegation(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeOwnerCall extends ethereum.Call {
  get inputs(): ChangeOwnerCall__Inputs {
    return new ChangeOwnerCall__Inputs(this);
  }

  get outputs(): ChangeOwnerCall__Outputs {
    return new ChangeOwnerCall__Outputs(this);
  }
}

export class ChangeOwnerCall__Inputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeOwnerCall__Outputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }
}

export class ClearDelegateCall extends ethereum.Call {
  get inputs(): ClearDelegateCall__Inputs {
    return new ClearDelegateCall__Inputs(this);
  }

  get outputs(): ClearDelegateCall__Outputs {
    return new ClearDelegateCall__Outputs(this);
  }
}

export class ClearDelegateCall__Inputs {
  _call: ClearDelegateCall;

  constructor(call: ClearDelegateCall) {
    this._call = call;
  }

  get delegator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClearDelegateCall__Outputs {
  _call: ClearDelegateCall;

  constructor(call: ClearDelegateCall) {
    this._call = call;
  }
}

export class SetDelegateCall extends ethereum.Call {
  get inputs(): SetDelegateCall__Inputs {
    return new SetDelegateCall__Inputs(this);
  }

  get outputs(): SetDelegateCall__Outputs {
    return new SetDelegateCall__Outputs(this);
  }
}

export class SetDelegateCall__Inputs {
  _call: SetDelegateCall;

  constructor(call: SetDelegateCall) {
    this._call = call;
  }

  get delegator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get delegate(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetDelegateCall__Outputs {
  _call: SetDelegateCall;

  constructor(call: SetDelegateCall) {
    this._call = call;
  }
}
